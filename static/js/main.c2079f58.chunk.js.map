{"version":3,"sources":["inputfile.js","serviceWorker.js","index.js","logo.svg"],"names":["InputFile","props","context","handleChange","bind","e","this","onChange","type","React","Component","Boolean","window","location","hostname","match","getSeconds","s","p","split","length","parseInt","parseFloat","CCEntry","i","r","parts","state","index","range","start","end","prompt","handleMouseDown","target","contentEditable","key","className","onMouseDown","CCTable","entries","loadFile","text","lines","pos","count","isNaN","trim","push","setState","onsrtloaded","file","files","reader","FileReader","foo","onload","parseSrt","result","readAsText","rows","render","id","value","accept","handle_resize","CCVideo","url","handleVideoUrlChange","videourl","video","$","pause","load","play","classname","controls","src","href","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.c2079f58.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass InputFile extends React.Component {\r\n\r\n    constructor(props, context) {\r\n        super(props, context);\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    handleChange(e)\r\n    {\r\n        if (this.props.onChange)\r\n        {\r\n            this.props.onChange(e);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <input type='file' onChange={ this.handleChange } />;\r\n    }\r\n}\r\n\r\n\r\nexport default InputFile;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport InputFile from './inputfile';\r\n// eslint-disable-next-line\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// eslint-disable-next-line\r\nimport { saveAs } from 'file-saver';\r\nimport $ from 'jquery';\r\n\r\nfunction getSeconds(s) {\r\n  var p = s.split(':');\r\n  if (p.length === 3) {\r\n    var hours = parseInt(p[0]);\r\n    var minutes = parseInt(p[1]);\r\n    var seconds = parseFloat(p[2]);\r\n    return (hours * 3600) + (minutes * 60) + seconds;\r\n  }\r\n  return 0;\r\n}\r\n\r\nclass CCEntry extends React.Component\r\n{\r\n  constructor(props, i, r, p)\r\n  {\r\n    super(props);\r\n\r\n    var s = \"\";\r\n    var e = \"\";\r\n    var parts = r.split(\"-->\");\r\n    if (parts.length === 2) {\r\n      s = parts[0];\r\n      e = parts[1];\r\n    }\r\n\r\n    this.state = {index: i, range: r, start: getSeconds(s), end: getSeconds(e), prompt: p};\r\n\r\n    this.handleMouseDown = this.handleMouseDown.bind(this);\r\n  }\r\n\r\n  handleMouseDown(e){\r\n    e.target.contentEditable = true;\r\n  }\r\n\r\n  render() {\r\n    return <div key={this.state.index}>\r\n      <div className=\"srt-range\">{this.state.range}</div>\r\n      <xmp className=\"srt-prompt\" onMouseDown={this.handleMouseDown} >{this.state.prompt}</xmp>\r\n    </div>;\r\n  }\r\n}\r\n\r\nclass CCTable extends React.Component\r\n{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {entries: []};\r\n    this.loadFile = this.loadFile.bind(this)\r\n  }\r\n\r\n  parseSrt(text)\r\n  {\r\n    var entries = []\r\n    var lines = text.split(\"\\n\");\r\n    var pos = 0;\r\n    var count = lines.length;\r\n    while (pos < count)\r\n    {\r\n      var index = parseInt(lines[pos++]);\r\n      if (isNaN(index) || pos >= count) {\r\n        break;\r\n      }\r\n      var range = lines[pos++].trim();\r\n      if (pos >= count) {\r\n        break;\r\n      }\r\n      // consume the entire prompt up to next blank line.\r\n      var prompt = lines[pos++].trim();\r\n      while (pos < count && lines[pos].trim() !== \"\")\r\n      {\r\n        prompt += '\\n' + lines[pos++].trim();\r\n      }\r\n\r\n      // skip blank lines.\r\n      while (pos < count && lines[pos].trim() === \"\"){\r\n        pos++;\r\n      }\r\n\r\n      entries.push(new CCEntry({}, index, range, prompt));\r\n    }\r\n    this.setState({entries: entries});\r\n\r\n    if (window.onsrtloaded){\r\n      // give this to index.html...\r\n      window.onsrtloaded(entries);\r\n    }\r\n\r\n    return entries;\r\n  }\r\n\r\n  loadFile(e) {\r\n    var file = e.target.files[0];\r\n    window.file = file;\r\n    var reader = new FileReader();\r\n    var foo = this;\r\n    reader.onload = function(e) {\r\n      foo.parseSrt(e.target.result);\r\n    };\r\n\r\n    // Read in the srt file as a data URL.\r\n    reader.readAsText(file);\r\n  }\r\n\r\n  render() {\r\n    const rows = [];\r\n    let i;\r\n    for (i = 0; i < this.state.entries.length; i++)\r\n    {\r\n      rows.push(this.state.entries[i].render());\r\n    }\r\n    return <div className=\"srt-wrapper\">\r\n      <div>\r\n        SRT location:<br/>\r\n        <InputFile id=\"SrtUrl\" value=\"\" className=\"fileprompt\" accept=\".srt, .txt\"\r\n               onChange={ this.loadFile } />\r\n      </div>\r\n      <div id=\"ccEntries\" className=\"srt-table\" >\r\n        {rows}\r\n      </div>\r\n    </div>;\r\n  }\r\n\r\n  componentDidUpdate(){\r\n    if (window.handle_resize){\r\n      window.handle_resize();\r\n    }\r\n  }\r\n}\r\n\r\nclass CCVideo extends React.Component\r\n{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {url: \"https://microsoft.sharepoint.com/teams/MSROutreachOnlineEngagement/Shared Documents/Webinars/Episodes/11. Project Coyote/Video/Chris_Lovett-Webinar_V3_CBR_2020-04-15.mp4\"};\r\n    this.handleVideoUrlChange = this.handleVideoUrlChange.bind(this)\r\n\r\n  }\r\n\r\n  handleVideoUrlChange(e) {\r\n    var videourl = e.target.value;\r\n    this.setState({url: videourl});\r\n    //var videoplayersrc  = $(\"#videoplayersrc\")[0];\r\n    //videoplayersrc.setAttribute(\"src\", videourl.value);\r\n    var video  = $(\"#videoplayer\")[0];\r\n    video.pause();\r\n    try {\r\n      video.load();\r\n      video.play();\r\n    } catch {\r\n      // bad url...\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <div classname=\"half-width\">\r\n    <div>\r\n      Video location:<br/>\r\n      <input type=\"url\" id=\"videourl\" value={this.state.url} className=\"half-width\" onChange={this.handleVideoUrlChange}/>\r\n    </div>\r\n    <video id=\"videoplayer\" className=\"embed-responsive-item half-width\" controls >\r\n        <source id=\"videoplayersrc\"\r\n          className=\"embed-responsive-item\"\r\n          src={this.state.url}\r\n          type=\"video/mp4\"/>\r\n    </video>\r\n    <p>\r\n        There is an <a href=\"http://lovettsoftware.com/Teleprompter/Chris_Lovett-Webinar_V2_2020-04-18.srt\">example SRT file</a>\r\n        that you can download and try.\r\n    </p>\r\n  </div>;\r\n  }\r\n\r\n}\r\n\r\nReactDOM.render(\r\n  <section>\r\n    <CCTable></CCTable>\r\n    <CCVideo></CCVideo>\r\n  </section>,\r\n  document.getElementById('react-root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}